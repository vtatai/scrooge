{{>autogen}}
{{>package}}
{{>type_imports}}
{{>thrift_imports}}

import com.twitter.finagle.thrift.DeserializeCtx;
import com.twitter.finagle.thrift.ThriftClientRequest;

import com.twitter.scrooge.ThriftException;
import com.twitter.scrooge.ThriftMethod;
import com.twitter.scrooge.ThriftResponse;
import com.twitter.scrooge.ThriftService;
import com.twitter.scrooge.ThriftStruct;
import com.twitter.scrooge.ThriftStructCodec;
import com.twitter.scrooge.ThriftStructCodec3;
import com.twitter.scrooge.ToThriftService;

import com.twitter.util.ConstFuture;
import com.twitter.util.Future;
import com.twitter.util.Function;
import com.twitter.util.Function2;
import com.twitter.util.Try;
import com.twitter.util.Return;
import com.twitter.util.Throw;

import scala.Function1;
import scala.runtime.AbstractFunction1;

public class {{name}} {
  public interface FutureIface extends ThriftService {
    {{#functions}}
    Future<{{{return_type.type_name_in_container}}}> {{name}}({{{argument_list_with_types}}});
    {{/functions}}
  }

  public static abstract class BaseServiceIface implements ToThriftService {
    {{#functions}}
    protected final com.twitter.finagle.Service<{{method.arg}}, {{method.result}}> {{name}};
    {{/functions}}

    private BaseServiceIface(
      {{{base_service_params}}}
    ) {
      {{#functions}}
      this.{{name}} = {{name}};
      {{/functions}}
    }
  }

  public static class ServiceIface extends BaseServiceIface {
    public ServiceIface(
      {{{base_service_params}}}
    ) {
      super({{{base_service_args}}});
    }

    @Override
    public ThriftService toThriftService() {
      return new MethodIface(this);
    }
  }

  public static class MethodIface implements FutureIface {
    {{#functions}}
    private com.twitter.finagle.Service<{{method.arg}}, {{return_type.type_name_in_container}}> {{method.name}}Service;
    {{/functions}}

    @SuppressWarnings("unchecked")
    public MethodIface(final BaseServiceIface serviceIface) {
      {{#functions}}
      com.twitter.finagle.Filter<{{method.arg}}, {{return_type.type_name_in_container}}, {{method.arg}}, {{method.result}}> {{method.name}}Filter = resultFilter({{method.name}}Method);
      {{method.name}}Service = {{method.name}}Filter.andThen(new com.twitter.finagle.Service<{{method.arg}}, {{method.result}}>() {
        // This service is only needed to adapt the types because of Scala types
        @Override
        public Future<{{method.result}}> apply({{method.arg}} request) {
          return serviceIface.{{method.name}}.apply(request);
        }
      });
      {{/functions}}
    }

    {{#functions}}
    @Override
    public Future<{{return_type.type_name_in_container}}> {{method.name}}({{argument_list_with_types}}) {
      return {{method.name}}Service.apply(new {{method.arg}}({{argument_list}}));
    }
    {{/functions}}
  }

  {{#functions}}
  private static final {{method.className}} {{method.name}}Method = new {{method.className}}();

  public static class {{method.className}} implements ThriftMethod {
    public final static ArgsCodec argsCodec = new ArgsCodec();
    public final static ResultCodec resultCodec = new ResultCodec();
    private final static String name = "{{method.name}}";
    private final static String serviceName = "{{serviceName}}";

    public static class ArgsCodec extends ThriftStructCodec3<Args> {
      @Override
      public void encode(Args args, TProtocol oprot) throws TException {
        args.write(oprot);
      }

      @Override
      public Args decode(TProtocol iprot) throws TException {
        {{name}}_args {{name}}_args = new {{name}}_args();
        {{name}}_args.read(iprot);
        return new Args(
          {{#arguments}}
          {{name}}_args.get{{#cap}}{{.}}{{/cap}}()
          {{/arguments}}
        );
      }
    }

    public static class Args implements ThriftStruct {
      {{#fields}}
      private final {{field_type.type_name}} {{name}};
      {{/fields}}

      public Args(
        {{argument_list_with_types}}
      ) {
        {{#fields}}
        this.{{name}} = {{name}};
        {{/fields}}
      }

      @Override
      public void write(TProtocol oprot) throws TException {
        new {{name}}_args()
          {{#fields}}
          .set{{#cap}}{{name}}{{/cap}}({{name}})
          {{/fields}}
          .write(oprot);
      }
    }

    public static class ResultCodec extends ThriftStructCodec3<Result> {
      @Override
      public Result decode(TProtocol iprot) throws TException {
        {{name}}_result result = new {{name}}_result();
        result.read(iprot);
        return new Result(result.getSuccess());
      }

      @Override
      public void encode(Result result, TProtocol oprot) throws TException {
        result.write(oprot);
      }
    }

    public static class Result implements ThriftStruct, ThriftResponse {
      {{#return_type}}
      {{^is_oneway_void}}
      private final scala.Option<{{type_name_in_container}}> result;

      public Result({{type_name}} result) {
        this.result = scala.Option.<{{type_name_in_container}}>apply(result);
      }

      @Override
      public void write(TProtocol oprot) throws TException {
        new {{name}}_result().setSuccess(result.get()).write(oprot);
      }

      @Override
      public scala.Option successField() {
        return result;
      }
      {{/is_oneway_void}}
      {{#is_oneway_void}}
      @Override
      public void write(TProtocol oprot) throws TException {
        new {{name}}_result().write(oprot);
      }
      {{/is_oneway_void}}
      {{/return_type}}

      @Override
      public scala.collection.Iterable<scala.Option<ThriftException>> exceptionFields() {
        return scala.collection.convert.WrapAsScala$.MODULE$.asScalaBuffer(new ArrayList<>());
      }

      @Override
      public scala.Option<ThriftException> firstException() {
        for (scala.Option<ThriftException> e : scala.collection.convert.WrapAsJava$.MODULE$.asJavaCollection(exceptionFields())) {
          if (e.isDefined()) {
            return e;
          }
        }
        return scala.Option.<ThriftException>apply(null);
      }
    }

    @Override
    public Object functionToService(Object f) {
      throw new UnsupportedOperationException();
    }

    @Override
    public Object serviceToFunction(Object svc) {
      throw new UnsupportedOperationException();
    }

    @Override
    public String name() {
      return name;
    }

    @Override
    public String serviceName() {
      return serviceName;
    }

    @Override
    public ThriftStructCodec3 argsCodec() {
      return argsCodec;
    }

    @Override
    public ThriftStructCodec3 responseCodec() {
      return resultCodec;
    }

    @Override
    public boolean oneway() {
      return false;
    }
  }
  {{/functions}}

  public static class FinagledClient implements FutureIface {
    private final com.twitter.finagle.Service<com.twitter.finagle.thrift.ThriftClientRequest, byte[]> service;
    private final TProtocolFactory protocolFactory;
    private final String serviceName;
    private final com.twitter.finagle.stats.StatsReceiver statsReceiver;
    private final scala.PartialFunction<com.twitter.finagle.service.ReqRep, com.twitter.finagle.service.ResponseClass> responseClassifier;

    public FinagledClient(com.twitter.finagle.Service<com.twitter.finagle.thrift.ThriftClientRequest, byte[]> service, TProtocolFactory protocolFactory,
        String serviceName, com.twitter.finagle.stats.StatsReceiver statsReceiver,
        scala.PartialFunction<com.twitter.finagle.service.ReqRep, com.twitter.finagle.service.ResponseClass> responseClassifier) {
      this.service = service;
      this.protocolFactory = protocolFactory;
      this.serviceName = serviceName;
      this.statsReceiver = statsReceiver;
      this.responseClassifier = responseClassifier;
    }

    public com.twitter.finagle.thrift.ThriftClientRequest encodeRequest(String name, ThriftStruct args) throws TException {
      TMemoryBuffer buf = new TMemoryBuffer(512);
      TProtocol oprot_ = protocolFactory.getProtocol(buf);
      oprot_.writeMessageBegin(new TMessage(name, TMessageType.CALL, 0));
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
      byte[] bytes = Arrays.copyOfRange(buf.getArray(), 0, buf.length());
      return new com.twitter.finagle.thrift.ThriftClientRequest(bytes, false);
    }

    protected <T extends ThriftStruct> T decodeResponse(byte[] resBytes, ThriftStructCodec<T> codec) throws TException {
      TProtocol iprot = protocolFactory.getProtocol(new TMemoryInputTransport(resBytes));
      TMessage msg = iprot.readMessageBegin();

      try {
        if (msg.type == TMessageType.EXCEPTION) {
          TApplicationException x = TApplicationException.read(iprot);
          iprot.readMessageEnd();
          throw x;
        }
        return codec.decode(iprot);
      } finally {
        iprot.readMessageEnd();
      }
    }

    @Override
    public Future<String> ping(String message) {
//      __stats_ping.RequestsCounter.incr()
      Ping.Args inputArgs = new Ping.Args(message);
      scala.Function1<byte[], Try<String>> replyDeserializer = new scala.runtime.AbstractFunction1<byte[], Try<String>>() {
        @Override
        public Try<String> apply(byte[] response) {
          try {
            Ping.Result result = decodeResponse(response, Ping.resultCodec);
            if(result.success.isDefined()) {
              return new Return<>(result.success.get());
            } else {
              return new Throw(missingResult("ping"));
            }
          } catch (TException e) {
            return new Throw(e);
          }
        }
      };

      DeserializeCtx<String> serdeCtx = new DeserializeCtx<>(inputArgs, replyDeserializer);
      ThriftClientRequest serialized;
      try {
        serialized = encodeRequest("ping", inputArgs);
      } catch (TException e) {
        throw new RuntimeException(e);
      }
      Future<String> flatMap = this.service.apply(serialized)
              .flatMap(new scala.runtime.AbstractFunction1<byte[], Future<String>>() {
                @Override
                public Future<String> apply(byte[] response) {
                  return new ConstFuture<>(serdeCtx.deserialize(response));
                }
              });
      Future<String> respond = flatMap.respond(new AbstractFunction1<Try<String>, scala.runtime.BoxedUnit>() {
        @Override
        public scala.runtime.BoxedUnit apply(Try<String> response) {
          com.twitter.finagle.service.ResponseClass responseClass = responseClassifier.applyOrElse(
                  new ReqRep(inputArgs, (Try) response),
                  com.twitter.finagle.service.ResponseClassifier.Default());
          if (responseClass instanceof com.twitter.finagle.service.ResponseClass.Successful) {
//                  SuccessCounter.incr();
          } else if (responseClass instanceof com.twitter.finagle.service.ResponseClass.Failed) {
//                  __stats_ping.FailuresCounter.incr();
            if (response instanceof Throw) {
              setServiceName(((Throw) response).e());
//                    __stats_ping.FailuresScope.counter(Throwables.mkString(ex):_ *).incr();
            }
          }
          return null;
        }
      });
      return respond;
    }

    protected TApplicationException missingResult(String name) {
      return new TApplicationException(
              TApplicationException.MISSING_RESULT,
              name + " failed: unknown result");
    }

    protected Throwable setServiceName(Throwable ex) {
      if (this.serviceName != "" && ex instanceof com.twitter.finagle.SourcedException) {
        ((com.twitter.finagle.SourcedException) ex).serviceName_$eq(this.serviceName);
      }
      return ex;
    }
  }

  public static class Processor{{#extends_iface}} extends {{name}}.Processor{{/extends_iface}} implements TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(Iface iface)
    {
      {{#extends_iface}}
      super(iface);
      {{/extends_iface}}
      iface_ = iface;
      {{#functions}}
      processMap_.put("{{name}}", new {{name}}());
      {{/functions}}
    }

    {{^extends_iface}}
    protected static interface ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException;
    }

    {{/extends_iface}}
    private Iface iface_;
    {{^extends_iface}}
    protected final HashMap<String,ProcessFunction> processMap_ = new HashMap<String,ProcessFunction>();
    {{/extends_iface}}

    public boolean process(TProtocol iprot, TProtocol oprot) throws TException
    {
      TMessage msg = iprot.readMessageBegin();
      ProcessFunction fn = processMap_.get(msg.name);
      if (fn == null) {
        TProtocolUtil.skip(iprot, TType.STRUCT);
        iprot.readMessageEnd();
        TApplicationException x = new TApplicationException(TApplicationException.UNKNOWN_METHOD, "Invalid method name: '"+msg.name+"'");
        oprot.writeMessageBegin(new TMessage(msg.name, TMessageType.EXCEPTION, msg.seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return true;
      }
      fn.process(msg.seqid, iprot, oprot);
      return true;
    }

    {{#functions}}
    private class {{name}} implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        {{name}}_args args = new {{name}}_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("{{name}}", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        {{^is_oneway}}
        {{name}}_result result = new {{name}}_result();
        {{/is_oneway}}
        {{#has_exceptions}}
        try {
        {{/has_exceptions}}
        {{#i_if_has_exceptions}}
        {{^is_oneway}}{{^return_type.is_void}}result.success = {{/return_type.is_void}}{{/is_oneway}}iface_.{{name}}({{{argument_list_with_args}}});
        {{^is_oneway}}{{^return_type.is_void}}{{^return_type.nullable}}result.setSuccessIsSet(true);{{/return_type.nullable}}{{/return_type.is_void}}{{/is_oneway}}
        {{/i_if_has_exceptions}}
        {{^is_oneway}}{{#exceptions}}
        } catch ({{{field_type.type_name}}} {{name}}) {
          {{^is_oneway}}
          result.{{name}} = {{name}};
          {{/is_oneway}}
        {{/exceptions}}
        {{#has_exceptions}}
        } catch (Throwable th) {
          LOGGER.error("Internal error processing {{name}}", th);
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing {{name}}");
          oprot.writeMessageBegin(new TMessage("{{name}}", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        {{/has_exceptions}}{{/is_oneway}}
        {{#is_oneway}}
        return;
        {{/is_oneway}}
        {{^is_oneway}}
        oprot.writeMessageBegin(new TMessage("{{name}}", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        {{/is_oneway}}
      }
    }
    {{/functions}}
  }

  public static class FinagleService {{#extends_iface}}extends {{name}}.Service{{/extends_iface}}{{^extends_iface}}extends com.twitter.finagle.Service<byte[], byte[]>{{/extends_iface}} {
    private final FutureIface iface;
    private final TProtocolFactory protocolFactory;
    {{^extends_iface}}
    protected HashMap<String, Function2<TProtocol, Integer, Future<byte[]>>> functionMap = new HashMap<String, Function2<TProtocol, Integer, Future<byte[]>>>();
    {{/extends_iface}}
    public FinagleService(final FutureIface iface, final TProtocolFactory protocolFactory) {
      {{#extends_iface}}
      super(iface, protocolFactory);
      {{/extends_iface}}
      this.iface = iface;
      this.protocolFactory = protocolFactory;
      {{#functions}}
      functionMap.put("{{name}}", new Function2<TProtocol, Integer, Future<byte[]>>() {
        public Future<byte[]> apply(final TProtocol iprot, final Integer seqid) {
          {{name}}_args args = new {{name}}_args();
          try {
            args.read(iprot);
          } catch (TProtocolException e) {
            try {
              iprot.readMessageEnd();
              TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
              TMemoryBuffer memoryBuffer = new TMemoryBuffer(512);
              TProtocol oprot = protocolFactory.getProtocol(memoryBuffer);

              oprot.writeMessageBegin(new TMessage("{{name}}", TMessageType.EXCEPTION, seqid));
              x.write(oprot);
              oprot.writeMessageEnd();
              oprot.getTransport().flush();
              byte[] buffer = Arrays.copyOfRange(memoryBuffer.getArray(), 0, memoryBuffer.length());
              return Future.value(buffer);
            } catch (Exception e1) {
              return Future.exception(e1);
            }
          } catch (Exception e) {
            return Future.exception(e);
          }

          try {
            iprot.readMessageEnd();
          } catch (Exception e) {
            return Future.exception(e);
          }
          Future<{{{return_type.type_name_in_container}}}> future;
          try {
            future = iface.{{name}}({{{argument_list_with_args}}});
          } catch (Exception e) {
            future = Future.exception(e);
          }

          {{#is_oneway}}
          return future.map(new Function<{{{return_type.type_name_in_container}}}, byte[]>() {
            public byte[] apply({{{return_type.type_name_in_container}}} value) {
              return new byte[0];
            }
          });
          {{/is_oneway}}
          {{^is_oneway}}
          try {
            return future.flatMap(new Function<{{{return_type.type_name_in_container}}}, Future<byte[]>>() {
              public Future<byte[]> apply({{{return_type.type_name_in_container}}} value) {
                {{name}}_result result = new {{name}}_result();
                {{^is_oneway}}{{^return_type.is_void}}
                result.success = value;
                result.setSuccessIsSet(true);
                {{/return_type.is_void}}{{/is_oneway}}

                try {
                  TMemoryBuffer memoryBuffer = new TMemoryBuffer(512);
                  TProtocol oprot = protocolFactory.getProtocol(memoryBuffer);

                  oprot.writeMessageBegin(new TMessage("{{name}}", TMessageType.REPLY, seqid));
                  result.write(oprot);
                  oprot.writeMessageEnd();

                  return Future.value(Arrays.copyOfRange(memoryBuffer.getArray(), 0, memoryBuffer.length()));
                } catch (Exception e) {
                  return Future.exception(e);
                }
              }
            }).rescue(new Function<Throwable, Future<byte[]>>() {
              public Future<byte[]> apply(Throwable t) {
                {{^is_oneway}}{{#has_exceptions}}
                try {
                  {{name}}_result result = new {{name}}_result();
                  {{#exceptions}}
                  {{^first}}else {{/first}}if (t instanceof {{{field_type.type_name}}}) {
                    result.{{name}} = ({{{field_type.type_name}}})t;
                  }
                  {{/exceptions}}
                  else {
                    return Future.exception(t);
                  }
                  TMemoryBuffer memoryBuffer = new TMemoryBuffer(512);
                  TProtocol oprot = protocolFactory.getProtocol(memoryBuffer);
                  oprot.writeMessageBegin(new TMessage("{{name}}", TMessageType.REPLY, seqid));
                  result.write(oprot);
                  oprot.writeMessageEnd();
                  oprot.getTransport().flush();
                  return Future.value(Arrays.copyOfRange(memoryBuffer.getArray(), 0, memoryBuffer.length()));
                } catch (Exception e) {
                  return Future.exception(e);
                }
                {{/has_exceptions}}
                {{^has_exceptions}}
                return Future.exception(t);
                {{/has_exceptions}}
                {{/is_oneway}}
                {{#is_oneway}}
                return Future.exception(t);
                {{/is_oneway}}
              }
            });
          } catch (Exception e) {
            return Future.exception(e);
          }
          {{/is_oneway}}
        }
      });
      {{/functions}}
    }

    public Future<byte[]> apply(byte[] request) {
      TTransport inputTransport = new TMemoryInputTransport(request);
      TProtocol iprot = protocolFactory.getProtocol(inputTransport);

      TMessage msg;
      try {
        msg = iprot.readMessageBegin();
      } catch (Exception e) {
        return Future.exception(e);
      }

      Function2<TProtocol, Integer, Future<byte[]>> fn = functionMap.get(msg.name);
      if (fn == null) {
        try {
          TProtocolUtil.skip(iprot, TType.STRUCT);
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.UNKNOWN_METHOD, "Invalid method name: '"+msg.name+"'");
          TMemoryBuffer memoryBuffer = new TMemoryBuffer(512);
          TProtocol oprot = protocolFactory.getProtocol(memoryBuffer);
          oprot.writeMessageBegin(new TMessage(msg.name, TMessageType.EXCEPTION, msg.seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return Future.value(Arrays.copyOfRange(memoryBuffer.getArray(), 0, memoryBuffer.length()));
        } catch (Exception e) {
          return Future.exception(e);
        }
      }

      return fn.apply(iprot, msg.seqid);
    }
  }

  /**
   * Reimplementation of ThriftServiceIface.resultFilter in Java.
   */
  private static <A, ST, R extends ThriftResponse<ST>> com.twitter.finagle.Filter<A, ST, A, R> resultFilter(final ThriftMethod method) {
    return new com.twitter.finagle.Filter<A, ST, A, R>() {
      @Override
      public Future<ST> apply(A args, com.twitter.finagle.Service<A, R> service) {
        return service.apply(args).flatMap(new scala.runtime.AbstractFunction1<R, Future<ST>>() {
          @Override
          public Future<ST> apply(R response) {
            scala.Option<ThriftException> thriftExceptionOption = response.firstException();
            if (thriftExceptionOption.isDefined()) {
              ThriftException thriftException = thriftExceptionOption.get();
              if (thriftException instanceof com.twitter.finagle.SourcedException && !method.serviceName().isEmpty()) {
                ((com.twitter.finagle.SourcedException) thriftException).serviceName_$eq(method.serviceName());
              }
              return Future.exception(thriftException);
            } else {
              if (response.successField().isDefined()) {
                return Future.value(response.successField().get());
              } else {
                return Future.exception(new TApplicationException(
                    TApplicationException.MISSING_RESULT,
                    "Thrift method '" + method.name() + "' failed: missing result"
                  ));
              }
            }
          }
        });
      }
    };
  }

  {{#functions}}
  {{{arg_struct}}}

  {{^is_oneway}}
  {{{result_struct}}}

  {{/is_oneway}}

  {{/functions}}
}
